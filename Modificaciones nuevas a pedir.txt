Modificaciones nuevas


Dentro de las variables poder escojer de cuantas URL se extraeran preguntas, las url, nombre de esa seccion y cuantas preguntas se extrairan de cada una (igual agarrarlas de forma aleatoria para que nunca haya 2 runs iguales), luego que se cargan todas las preguntas, hacer shufle para que nunca se muestren en orden en el examen, y al final, en el overview, antes de poner las preguntas, agregar una tabla, con un formato de header rojo con letras blancas, donde las columnas sean:

Nombre de la seccion, preguntas totales, respuestas correctas

y al final de la tabla, una suma y debajo el mensaje de aprobado o reprobado

Como id del test ponle (mini examen) y ponle extraer 1 pregunta de cada pool de estas url como ejemplo

https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo1-espanol.json

https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo2-espanol.json

https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo3-espanol.json

https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo4-espanol.json

https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo5-espanol.json

https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo6-espanol.json

https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo7-espanol.json

https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo8-espanol.json

https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo9-espanol.json

https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo10-espanol.json

https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo11-espanol.json

https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo12-espanol.json

https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo13-espanol.json

https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo14-espanol.json

asegurate que tambien defines cuantas preguntas extraer de cada URL y que siempre sean aleatorias, que nunca se extraigan las mismas (puede ser que yo quiera extraer 10 de una url y solo 1 de otra, que esta variable pueda ser cambiada en el codigo por URL), otro cambio es que no dara feedback inmediato al responder la pregunta, solo en el overview, y permitira ir para atras o para adelante conforme se contesta (no permitir ir a la siguiente pregunta si no se ha respondido, pero si permitir regresar a la pregunta anterior) que estas nuevas variables puedan ser editadas en la configuracion general como el resto de parametros

Ejemplo: Showfeedbackonquestion tue or false
Allow go to previous question true o false

Con estos cambios el resto de parametros que se mantendran seran

  quizTitle: "Este es un ex√°men de pr√°ctica",
  timeLimitSeconds: 1200,
  passPercentage: 70,
  correctText: "‚úÖ ¬°Correcto! ¬°Buen trabajo!",
  incorrectText: "‚ùå Respuesta Incorrecta.",
  passText: "‚úÖ ¬°Felicidades! Aprobaste este ex√°men de pr√°ctica! Recuerda que las preguntas del PSI ser√°n parecidas asi que sigue practicando!",
  failText: "‚ùå No aprobaste. Int√©ntalo de nuevo, recuerda que este ex√°men es solo para practicar, no te desanimes!",
  endOnTimeOut: false

se removera   questionsToShow ya que ahora esto debe depender de la suma de preguntas extraidas en total

Los botones de examen en espa√±ol y inicia el examen se quedan, y tambien debo de poder definir que link abre el examen en ingles como en el codigo origibnal, en la misma parte donde se definen el resto de parametros

ademas asegurate de que el texto antes de iniciar tambien sean variables editables


Recuerda, el codigo que ya funciona es este: asegurate de que la implementacion de como se genera el examen sea similar ya que funciona excelente, solo con los cambios necesarios para implementar lo nuevo

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Examen de Pr√°ctica</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      margin: 0;
      padding: 0;
      text-align: center;
      background: #fff;
      color: #222;
      font-size: 1.5rem;
      box-sizing: border-box;
    }
    .practice-section {
      max-width: 100%;
      margin: 2rem auto;
      padding: 1.5rem;
      width: 100%;
      max-width: 450px;
    }
    .practice-title {
      background-color: #d32f2f;
      color: #fff;
      padding: 1.5rem;
      font-size: 1.8rem;
      font-weight: bold;
      border-radius: 8px;
      margin-bottom: 2rem;
    }
    .practice-text {
      margin-bottom: 2rem;
      font-size: 1.4rem;
    }
    .instructions {
      font-size: 1.3rem;
      color: #555;
      margin-bottom: 2rem;
      background-color: #f9f9f9;
      padding: 1rem;
      border-radius: 8px;
      border: 1px solid #ccc;
    }
    .btn-practice, .btn {
      display: inline-block;
      margin: 0.5rem;
      padding: 1rem 2rem;
      background-color: #d32f2f;
      color: white;
      font-weight: bold;
      text-transform: uppercase;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      text-decoration: none;
      transition: background-color 0.3s ease;
      font-size: 1.2rem;
    }
    .btn-practice:hover, .btn:hover {
      background-color: #388e3c;
    }
    .question-container, .overview-card {
      background: #f9f9f9;
      padding: 2rem;
      margin: 1rem auto;
      border-radius: 10px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      max-width: 100%;
      width: 100%;
      max-width: 450px;
      text-align: left;
    }
    .overview-card.correcto {
      background-color: #e0f9e0;
      border: 1px solid #4caf50;
    }
    .overview-card.incorrecto {
      background-color: #fde0e0;
      border: 1px solid #f44336;
    }
    .question {
      margin-bottom: 1.5rem;
      font-weight: bold;
      font-size: 1.6rem;
      color: #333;
    }
    .options label {
      display: block;
      margin: 1rem 0;
      padding: 1rem;
      background: #fff;
      border: 1px solid #ccc;
      border-radius: 8px;
      cursor: pointer;
      transition: background 0.3s ease;
      font-size: 1.3rem;
    }
    .options label:hover {
      background: #eee;
    }
    .correct { color: green; font-size: 1.6rem; }
    .incorrect { color: red; font-size: 1.6rem; }
    .overtime { color: #d32f2f; font-weight: bold; }
    .justification-box {
      margin-top: 1rem;
      background-color: #fff8e1;
      padding: 1.5rem;
      border-radius: 8px;
      font-size: 1.4rem;
    }
    #feedback, #justification {
      margin-top: 1rem;
    }
    #result {
      margin-top: 2rem;
      font-size: 1.6rem;
    }
    #timeLeft, #questionCounter {
      margin: 1rem 0;
      font-size: 1.3rem;
    }
    .warning {
      background-color: #ffcc00;
      color: #333;
      padding: 2rem;
      border-radius: 8px;
      font-size: 1.4rem;
      margin: 3rem auto;
      max-width: 90%;
      width: 450px;
      font-weight: bold;
      text-align: center;
      box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
  </style>
</head>
<body>

<div id="contenedor-examenes"></div>

<div id="advertencia" class="warning">
  <p><strong>Aviso:</strong><br>
    Abajo se encuentra el bot√≥n para continuar el curso. No lo presiones a menos que ya hayas hecho el examen de pr√°ctica y quieras continuar con el resto de cap√≠tulos. Si lo presionas mientras est√°s haciendo un examen, se perder√° tu progreso.
  </p>
</div>

<script>
(function() {
// üìå Variables √∫nicas de este bloque (aislado por cada examen)
const examID = "capitulo1"; 
const questionsUrl = "https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo1-espanol.json"; 
const examUrlIngles = "https://testmoz.com/q/chapter1";

// üìå Configuraci√≥n espec√≠fica del examen
const config = {
  quizTitle: "Este es un ex√°men de pr√°ctica",
  timeLimitSeconds: 1200,
  questionsToShow: 10,
  passPercentage: 70,
  correctText: "‚úÖ ¬°Correcto! ¬°Buen trabajo!",
  incorrectText: "‚ùå Respuesta Incorrecta.",
  passText: "‚úÖ ¬°Felicidades! Aprobaste este ex√°men de pr√°ctica! Recuerda que las preguntas del PSI ser√°n parecidas asi que sigue practicando!",
  failText: "‚ùå No aprobaste. Int√©ntalo de nuevo, recuerda que este ex√°men es solo para practicar, no te desanimes!",
  endOnTimeOut: false
};

// üìå Variables internas del control de examen
let selectedQuestions = [], currentQuestionIndex = 0, userAnswers = [], timer, startTime;

// üìå Funci√≥n: Renderizar estructura base del examen
function renderExamenBase() {
  document.getElementById('contenedor-examenes').innerHTML = `
    <div id="mainContent-${examID}">
      <div class="practice-section">
        <div class="practice-title">üìö ¬°Has llegado al final del cap√≠tulo!</div>
        <p class="practice-text">
          Has llegado al final del cap√≠tulo. Antes de continuar, es importante practicar lo aprendido.
          Aseg√∫rate de tener tu libro contigo y realiza el examen de pr√°ctica de este cap√≠tulo.
        </p>
        <div class="instructions">
          üì¢ <strong>Importante:</strong><br>
          Al dar clic en el bot√≥n, se abrir√° una <strong>nueva ventana</strong> o se cargar√° el examen.<br>
          Cuando termines, regresa a esta p√°gina para seguir avanzando.
        </div>
        <a href="#" id="btnEspanol-${examID}" class="btn-practice">Hacer Examen de Pr√°ctica en Espa√±ol</a>
        <a href="${examUrlIngles}" target="_blank" class="btn-practice">Hacer Examen de Pr√°ctica en Ingl√©s</a>
      </div>
    </div>
  `;
}

// üìå Ejecutar render inicial
renderExamenBase();
// üìå Manejo de eventos de clic
document.addEventListener('click', function(event) {
  if (event.target && event.target.id === `btnEspanol-${examID}`) {
    event.preventDefault();
    cargarExamen();
  }
  if (event.target && event.target.id === `nextBtn-${examID}`) {
    currentQuestionIndex++;
    showQuestion();
  }
});

// üìå Funci√≥n para cargar el examen
async function cargarExamen() {
  if (!document.getElementById(`mainContent-${examID}`)) {
    renderExamenBase();
  }

  clearInterval(timer);
  selectedQuestions = [];
  currentQuestionIndex = 0;
  userAnswers = [];
  timer = null;
  startTime = null;

  const container = document.getElementById(`mainContent-${examID}`);
  window.scrollTo({ top: 0, behavior: 'smooth' });

  container.innerHTML = `
    <h1 id="quizTitle-${examID}">${config.quizTitle}</h1>
    <div id="timeLeft-${examID}"></div>
    <div id="questionCounter-${examID}"></div>
    <div id="quizContainer-${examID}"></div>
    <div id="feedback-${examID}"></div>
    <div id="justification-${examID}"></div>
    <button id="nextBtn-${examID}" class="btn" style="display:none;">Siguiente pregunta</button>
    <div id="result-${examID}"></div>
    <div id="overview-${examID}"></div>
    <div id="retryContainer-${examID}" style="display:none;">
      <button id="retryBtn-${examID}" class="btn">Volver a Intentar</button>
    </div>
  `;

  try {
    const response = await fetch(questionsUrl);
    const questions = await response.json();
    iniciarQuiz(questions);

    document.getElementById(`retryBtn-${examID}`).onclick = () => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
      cargarExamen();
    };
  } catch (error) {
    console.error('Error cargando preguntas:', error);
    container.innerHTML = '<p>Error cargando el examen. Intenta nuevamente.</p>';
  }
}
// üìå Funci√≥n para iniciar el examen
function iniciarQuiz(preguntas) {
  clearInterval(timer);
  shuffleArray(preguntas);
  selectedQuestions = preguntas.slice(0, config.questionsToShow);
  currentQuestionIndex = 0;
  userAnswers = [];
  startTime = Date.now();
  showQuestion();
  startTimer();
}

// üìå Funci√≥n para revolver las preguntas aleatoriamente
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

// üìå Funci√≥n para iniciar el temporizador
function startTimer() {
  let timeLeft = config.timeLimitSeconds;
  updateTimerDisplay(timeLeft);
  timer = setInterval(() => {
    timeLeft--;
    updateTimerDisplay(timeLeft);
    if (timeLeft < 0) {
      clearInterval(timer);
      if (config.endOnTimeOut) {
        showResult();
      } else {
        document.getElementById(`timeLeft-${examID}`).innerHTML = '‚è∞ Se acab√≥ el tiempo, pero puedes seguir respondiendo!';
      }
    }
  }, 1000);
}

// üìå Funci√≥n auxiliar para actualizar la visualizaci√≥n del tiempo
function updateTimerDisplay(seconds) {
  const t = Math.max(0, seconds);
  const minutes = Math.floor((t % 3600) / 60);
  const secs = t % 60;
  document.getElementById(`timeLeft-${examID}`).innerHTML = `‚è∞ ${minutes}m ${secs}s`;
}

// üìå Funci√≥n para mostrar una pregunta
function showQuestion() {
  if (currentQuestionIndex >= selectedQuestions.length) {
    showResult();
    return;
  }

  const q = selectedQuestions[currentQuestionIndex];
  document.getElementById(`quizContainer-${examID}`).innerHTML = '';

  const div = document.createElement('div');
  div.classList.add('question-container');
  document.getElementById(`questionCounter-${examID}`).innerText = `Pregunta ${currentQuestionIndex + 1} de ${config.questionsToShow}`;

  const question = document.createElement('div');
  question.classList.add('question');
  question.innerHTML = `<strong>${(currentQuestionIndex + 1)}. ${q.question}</strong>`;
  div.appendChild(question);

  const optionsDiv = document.createElement('div');
  optionsDiv.classList.add('options');

  q.options.forEach(option => {
    const label = document.createElement('label');
    const input = document.createElement('input');
    input.type = 'radio';
    input.name = `q-${examID}`;
    input.value = option;
    input.onclick = () => checkAnswer(option, q.answer, q.justification);
    label.appendChild(input);
    label.appendChild(document.createTextNode(' ' + option));
    optionsDiv.appendChild(label);
  });

  div.appendChild(optionsDiv);
  document.getElementById(`quizContainer-${examID}`).appendChild(div);

  document.getElementById(`feedback-${examID}`).innerText = '';
  document.getElementById(`justification-${examID}`).innerText = '';
  document.getElementById(`nextBtn-${examID}`).style.display = 'none';
}
// üìå Funci√≥n para revisar la respuesta seleccionada
function checkAnswer(selected, correct, justification) {
  document.getElementById(`nextBtn-${examID}`).style.display = 'inline-block';

  if (selected === correct) {
    document.getElementById(`feedback-${examID}`).innerText = config.correctText;
    document.getElementById(`justification-${examID}`).innerText = "";
  } else {
    document.getElementById(`feedback-${examID}`).innerText = config.incorrectText;
    document.getElementById(`justification-${examID}`).innerHTML = `
      <div class="justification-box">
        <strong>La correcta era:</strong> ${correct}<br><em>${justification}</em>
      </div>`;
  }

  userAnswers.push({
    question: selectedQuestions[currentQuestionIndex].question,
    selected,
    correct,
    justification,
    wasCorrect: selected === correct
  });

  // Desactivar opciones para evitar m√∫ltiples selecciones
  document.querySelectorAll(`#mainContent-${examID} input[name="q-${examID}"]`).forEach(input => input.disabled = true);
}

// üìå Funci√≥n para mostrar resultados finales
function showResult() {
  clearInterval(timer);

  // Ocultar elementos del examen activo
  document.getElementById(`quizTitle-${examID}`).style.display = 'none';
  document.getElementById(`timeLeft-${examID}`).style.display = 'none';
  document.getElementById(`questionCounter-${examID}`).style.display = 'none';
  document.getElementById(`quizContainer-${examID}`).style.display = 'none';
  document.getElementById(`feedback-${examID}`).style.display = 'none';
  document.getElementById(`justification-${examID}`).style.display = 'none';
  document.getElementById(`nextBtn-${examID}`).style.display = 'none';

  const correctCount = userAnswers.filter(a => a.wasCorrect).length;
  const incorrectCount = userAnswers.length - correctCount;
  const percentage = (correctCount / selectedQuestions.length) * 100;
  const elapsedSeconds = Math.round((Date.now() - startTime) / 1000);

  const hours = Math.floor(elapsedSeconds / 3600);
  const minutes = Math.floor((elapsedSeconds % 3600) / 60);
  const seconds = elapsedSeconds % 60;

  document.getElementById(`result-${examID}`).innerText =
    percentage >= config.passPercentage ? config.passText : config.failText;

  const overview = document.getElementById(`overview-${examID}`);
  overview.innerHTML = `
    <h2>Resumen:</h2>
    <p>Tiempo total: ${hours} horas, ${minutes} minutos, ${seconds} segundos.</p>
    <p>Calificaci√≥n: ${percentage.toFixed(2)}%</p>
    <p>‚úÖ Correctas: ${correctCount} | ‚ùå Incorrectas: ${incorrectCount}</p>
  `;

  if (config.endOnTimeOut) {
    const unanswered = selectedQuestions.length - userAnswers.length;
    overview.innerHTML += `
      <p>‚ùì Preguntas no respondidas: ${unanswered}</p>
      <p>El examen finaliz√≥ porque se termin√≥ el tiempo.</p>
    `;
  } else {
    const timeOver = Math.max(0, elapsedSeconds - config.timeLimitSeconds);
    if (timeOver > 0) {
      const timeOverHours = Math.floor(timeOver / 3600);
      const timeOverMinutes = Math.floor((timeOver % 3600) / 60);
      const timeOverSeconds = timeOver % 60;
      overview.innerHTML += `
        <p>‚è±Ô∏è Tiempo extra: ${timeOverHours}h ${timeOverMinutes}m ${timeOverSeconds}s</p>
      `;
    }
  }

  // Mostrar respuestas de cada pregunta
  userAnswers.forEach((ans, idx) => {
    const card = document.createElement('div');
    card.className = 'overview-card ' + (ans.wasCorrect ? 'correcto' : 'incorrecto');
    if (ans.wasCorrect) {
      card.innerHTML = `<strong>${idx + 1}. ${ans.question}</strong><br>‚úÖ Respuesta correcta: ${ans.correct}`;
    } else {
      card.innerHTML = `<strong>${idx + 1}. ${ans.question}</strong><br>‚ùå Tu respuesta: ${ans.selected}<br>‚úÖ Respuesta correcta: ${ans.correct}<div class="justification-box">Justificaci√≥n: ${ans.justification}</div>`;
    }
    overview.appendChild(card);
  });

  // üìå Si no pasa, mostrar bot√≥n de volver a intentar
  if (percentage < config.passPercentage) {
    document.getElementById(`retryContainer-${examID}`).style.display = 'block';
    document.getElementById(`retryBtn-${examID}`).onclick = () => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
      cargarExamen();
    };
  }
}
})(); // üîí Cierre de la funci√≥n an√≥nima autoejecutable
</script>

</body>
</html>
