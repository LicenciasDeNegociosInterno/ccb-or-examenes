<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Examen de Pr√°ctica</title>
  <style>
    body { font-family: 'Segoe UI', sans-serif; margin: 2rem; text-align: center; background: #fff; color: #222; }
    .practice-section {
      max-width: 600px;
      margin: 2rem auto;
      padding: 2rem;
    }
    .practice-title {
      background-color: #d32f2f;
      color: #fff;
      padding: 1rem;
      font-size: 1.5rem;
      font-weight: bold;
      border-radius: 8px;
      margin-bottom: 2rem;
    }
    .practice-text {
      font-size: 1.1rem;
      margin-bottom: 2rem;
    }
    .instructions {
      font-size: 1rem;
      color: #555;
      margin-bottom: 2rem;
      background-color: #f9f9f9;
      padding: 1rem;
      border-radius: 8px;
      border: 1px solid #ccc;
    }
    .btn-practice, .btn {
      display: inline-block;
      margin: 0.5rem;
      padding: 0.75rem 1.5rem;
      background-color: #d32f2f;
      color: white;
      font-weight: bold;
      text-transform: uppercase;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      text-decoration: none;
      transition: background-color 0.3s ease;
    }
    .btn-practice:hover, .btn:hover {
      background-color: #388e3c;
    }
    .question-container, .overview-card {
      background: #f9f9f9;
      padding: 1.5rem;
      margin: 1rem auto;
      border-radius: 10px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      max-width: 600px;
      text-align: left;
    }
    .overview-card.correcto { background-color: #e0f9e0; border: 1px solid #4caf50; }
    .overview-card.incorrecto { background-color: #fde0e0; border: 1px solid #f44336; }
    .question { margin-bottom: 1.5rem; font-weight: bold; font-size: 1.3rem; color: #333; }
    .options label {
      display: block; margin: 0.8rem 0; padding: 0.5rem;
      background: #fff; border: 1px solid #ccc; border-radius: 8px;
      cursor: pointer; transition: background 0.3s ease;
    }
    .options label:hover { background: #eee; }
    .correct { color: green; font-size: 1.5rem; }
    .incorrect { color: red; font-size: 1.5rem; }
    .overtime { color: #d32f2f; font-weight: bold; }
    .justification-box {
      margin-top: 0.5rem;
      background-color: #ffe0e0;
      padding: 0.75rem;
      border-radius: 8px;
      font-size: 0.95rem;
    }
    #feedback, #justification { margin-top: 1rem; }
    #result { margin-top: 2rem; font-size: 1.5rem; }
    #timeLeft, #questionCounter { margin: 1rem 0; font-size: 1.2rem; }
  </style>
</head>
<body>

<div id="mainContent">
  <div class="practice-section">
    <div class="practice-title">üìö ¬°Has llegado al final del cap√≠tulo!</div>
    <p class="practice-text">
      Has llegado al final del cap√≠tulo. Antes de continuar, es importante practicar lo aprendido.
      Aseg√∫rate de tener tu libro contigo y realiza el examen de pr√°ctica de este cap√≠tulo.
    </p>
    <div class="instructions">
      üì¢ <strong>Importante:</strong><br>
      Al dar clic en el bot√≥n, se abrir√° una <strong>nueva ventana</strong> o se cargar√° el examen.<br>
      Cuando termines, regresa a esta p√°gina para seguir avanzando.
    </div>
    <a href="#" id="btnEspanol" class="btn-practice">Hacer Examen de Pr√°ctica en Espa√±ol</a>
    <a href="https://testmoz.com/q/chapter1" target="_blank" class="btn-practice">Hacer Examen de Pr√°ctica en Ingl√©s</a>
  </div>
</div>

<script>
let selectedQuestions = [], currentQuestionIndex = 0, userAnswers = [], timer, startTime;
const config = {
  quizTitle: "Examen de Pr√°ctica",
  timeLimitSeconds: 180,
  questionsToShow: 2,
  passPercentage: 70,
  correctText: "‚úÖ ¬°Correcto! ¬°Buen trabajo!",
  incorrectText: "‚ùå Incorrecto.",
  passText: "‚úÖ ¬°Felicidades! Aprobaste.",
  failText: "‚ùå Reprobado. Int√©ntalo de nuevo.",
  questionsUrl: "https://raw.githubusercontent.com/LicenciasDeNegociosInterno/ccb-or-examenes/refs/heads/main/capitulo1-espanol.json"
};

document.addEventListener('click', function(event) {
  if (event.target && event.target.id === 'btnEspanol') {
    event.preventDefault();
    cargarExamen();
  }
  if (event.target && event.target.id === 'nextBtn') {
    currentQuestionIndex++;
    showQuestion();
  }
});

async function cargarExamen() {
  const container = document.getElementById('mainContent');
  container.innerHTML = `
    <h1 id="quizTitle">${config.quizTitle}</h1>
    <div id="timeLeft"></div>
    <div id="questionCounter"></div>
    <div id="quizContainer"></div>
    <div id="feedback"></div>
    <div id="justification"></div>
    <button id="nextBtn" class="btn" style="display:none;">Siguiente pregunta</button>
    <div id="result"></div>
    <div id="overview"></div>
    <div id="retryContainer" style="display:none;">
      <button id="retryBtn" class="btn">Volver a Intentar</button>
    </div>
  `;

  try {
    const response = await fetch(config.questionsUrl);
    const questions = await response.json();
    iniciarQuiz(questions);
  } catch (error) {
    console.error('Error cargando preguntas:', error);
    document.getElementById('mainContent').innerHTML = '<p>Error cargando el examen. Intenta nuevamente.</p>';
  }
}

function iniciarQuiz(preguntas) {
  clearInterval(timer);
  shuffleArray(preguntas);
  selectedQuestions = preguntas.slice(0, config.questionsToShow);
  currentQuestionIndex = 0;
  userAnswers = [];
  startTime = Date.now();
  showQuestion();
  startTimer();
}

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

function startTimer() {
  let timeLeft = config.timeLimitSeconds;
  updateTimerDisplay(timeLeft);
  timer = setInterval(() => {
    timeLeft--;
    updateTimerDisplay(timeLeft);
    if (timeLeft < 0) clearInterval(timer);
  }, 1000);
}

function updateTimerDisplay(seconds) {
  const t = Math.max(0, seconds);
  const minutes = Math.floor((t % 3600) / 60);
  const secs = t % 60;
  document.getElementById('timeLeft').innerHTML = `‚è∞ ${minutes}m ${secs}s`;
}

function showQuestion() {
  if (currentQuestionIndex >= selectedQuestions.length) {
    showResult();
    return;
  }
  const q = selectedQuestions[currentQuestionIndex];
  document.getElementById('quizContainer').innerHTML = '';

  const div = document.createElement('div');
  div.classList.add('question-container');
  document.getElementById('questionCounter').innerText = `Pregunta ${currentQuestionIndex + 1} de ${config.questionsToShow}`;

  const question = document.createElement('div');
  question.classList.add('question');
  question.innerText = (currentQuestionIndex + 1) + ". " + q.question;
  div.appendChild(question);

  const optionsDiv = document.createElement('div');
  optionsDiv.classList.add('options');

  q.options.forEach(option => {
    const label = document.createElement('label');
    const input = document.createElement('input');
    input.type = 'radio';
    input.name = 'q';
    input.value = option;
    input.onclick = () => checkAnswer(option, q.answer, q.justification);
    label.appendChild(input);
    label.appendChild(document.createTextNode(' ' + option));
    optionsDiv.appendChild(label);
  });

  div.appendChild(optionsDiv);
  document.getElementById('quizContainer').appendChild(div);

  document.getElementById('feedback').innerText = '';
  document.getElementById('justification').innerText = '';
  document.getElementById('nextBtn').style.display = 'none';
}

function checkAnswer(selected, correct, justification) {
  document.getElementById('nextBtn').style.display = 'inline-block';
  if (selected === correct) {
    document.getElementById('feedback').innerText = config.correctText;
    document.getElementById('justification').innerText = "";
  } else {
    document.getElementById('feedback').innerText = config.incorrectText;
    document.getElementById('justification').innerHTML = `<strong>La correcta era:</strong> ${correct}<br><em>${justification}</em>`;
  }
  userAnswers.push({
    question: selectedQuestions[currentQuestionIndex].question,
    selected,
    correct,
    justification,
    wasCorrect: selected === correct
  });
  document.querySelectorAll('input[name="q"]').forEach(input => input.disabled = true);
}

function showResult() {
  clearInterval(timer);

  // üî• OCULTAR datos irrelevantes en el overview
  document.getElementById('quizTitle').style.display = 'none';
  document.getElementById('timeLeft').style.display = 'none';
  document.getElementById('questionCounter').style.display = 'none';
  document.getElementById('quizContainer').style.display = 'none';
  document.getElementById('feedback').style.display = 'none';
  document.getElementById('justification').style.display = 'none';
  document.getElementById('nextBtn').style.display = 'none';

  const correctCount = userAnswers.filter(a => a.wasCorrect).length;
  const incorrectCount = userAnswers.length - correctCount;
  const percentage = (correctCount / selectedQuestions.length) * 100;
  const elapsedSeconds = Math.round((Date.now() - startTime) / 1000);

  document.getElementById('result').innerText = percentage >= config.passPercentage ? config.passText : config.failText;

  const overview = document.getElementById('overview');
  overview.innerHTML = `
    <h2>Resumen:</h2>
    <p>Tiempo total: ${elapsedSeconds} segundos.</p>
    <p>Calificaci√≥n: ${percentage.toFixed(2)}%</p>
    <p>‚úÖ Correctas: ${correctCount} | ‚ùå Incorrectas: ${incorrectCount}</p>
  `;

  userAnswers.forEach((ans, idx) => {
    const card = document.createElement('div');
    card.className = 'overview-card ' + (ans.wasCorrect ? 'correcto' : 'incorrecto');
    if (ans.wasCorrect) {
      card.innerHTML = `<strong>${idx + 1}. ${ans.question}</strong><br>‚úÖ Respuesta correcta: ${ans.correct}`;
    } else {
      card.innerHTML = `<strong>${idx + 1}. ${ans.question}</strong><br>‚ùå Tu respuesta: ${ans.selected}<br>‚úÖ Respuesta correcta: ${ans.correct}<div class="justification-box">Justificaci√≥n: ${ans.justification}</div>`;
    }
    overview.appendChild(card);
  });

  if (percentage < config.passPercentage) {
    document.getElementById('retryContainer').style.display = 'block';
    document.getElementById('retryBtn').onclick = cargarExamen;
  }
}
</script>

</body>
</html>
